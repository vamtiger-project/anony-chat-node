var mongoose = require("mongoose"),
    Schema = require("vamtiger-database-schema"),
    schema = new Schema;

class Database {
    constructor(vamtiger) {
        if (vamtiger) {
            this.vamtiger = vamtiger;
            this.vamtiger.bind(Database, this);
        }

        this.UserRegistrationModel = mongoose.model("user_registration",
            schema.userRegistration);

        this.DirectMessageModel = mongoose.model("direct_message",
            schema.directMessage);

        mongoose.connect("mongodb://localhost/test");
    }

    save(recordInfo) {
        return new Promise((resolve, reject) => {
            var model = new this[recordInfo.model]();

            Object.keys(recordInfo.data).forEach((property) => {
                model[property] = recordInfo.data[property];
            });

            model.save((error, savedObject) => error ?
                reject(error) : resolve(savedObject));
        });
    }

    query(queryData) {
        return new Promise((resolve, reject) => {
            this.DirectMessageModel.find(queryData, (error, result) => error ?
                reject(error) : resolve(result));
        });
    }

    remove(removeQuery) {
        /**
         * Cleanup database.
         **/
    }
}

module.exports = Database;
